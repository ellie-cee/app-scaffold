"""
Django settings for ywm_qs project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.


BASE_DIR = Path(__file__).resolve().parent.parent




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-re9#=br+((2(gi39y!c20odhoq4tnk-)ph58l(sdu0ep1qa@!7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG_MODE")=="true"
ALLOWED_HOSTS = [os.getenv("APP_HOST"),"localhost","127.0.0.1"] 

CORS_ALLOWED_ORIGINS = [
    'https://abc.elliecee.xyz',
    "http://127.0.0.1"
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    #'django_redis',
    'home.apps.HomeConfig',
    'site_auth.apps.AuthConfig',
    'shopify_sites.apps.ShopifySitesConfig',
    "shopify_proxy.apps.ShopifyProxyConfig",
    "appointment"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'shopify_sites.middleware.LoginProtection',
    'shopify_sites.middleware.ShopifyEmbed'
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",  # Replace with your Redis URL
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor", # Optional compression
        }
    }
}

ROOT_URLCONF = 'xyz.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                "home.context_procesors.sidebarNav",
                "home.context_procesors.env",
                "home.context_procesors.proxyDetails",
                "appointment.context_processors.app_urls"
            ],
        },
    },
]

#SESSION_ENGINE = "django.contrib.sessions.backends.cache"
#SESSION_CACHE_ALIAS = "default"

WSGI_APPLICATION = 'xyz.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST":os.getenv("DB_HOST","localhost"),
        "NAME":os.getenv("DB_NAME"),
        "USER":os.getenv("DB_USER","crapp"),
        "PASSWORD":os.getenv("DB_PASSWORD"),
        "OPTIONS": {
            "read_default_file": "/path/to/my.cnf",
            'charset': 'utf8mb4',
            'collation': 'utf8mb4_unicode_ci',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'  # Example: Eastern Time

USE_I18N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    #BASE_DIR / "static"
    #BASE_DIR / "staticfiles",
    #"/var/www/static/",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

APPEND_SLASH = False


EMAIL_BACKEND = os.environ.get("DJANGO_EMAIL_BACKEND","django.core.mail.backends.smtp.EmailBackend")
#EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#M_EMAIL = os.environ.get("DEFAULT_EMAIL")  # if you don't already have this in settings


EMAIL_USE_TLS = False
EMAIL_PORT = 25
EMAIL_HOST_USER = os.environ.get("DEFAULT_EMAIL")

#EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_PASSWORD")
#SERVER_EMAIL = f"apps@{os.environ.get('MAIL_DOMAIN')}"  # ditto (default from-email for Django errors)
ANYMAIL = {
   # (exact settings here depend on your ESP...)
    "BREVO_API_KEY": os.environ.get("DJANGO_EMAIL_API_KEY"),
    "BREVO_API_URL":"https://api.brevo.com/v3/",
    "SENDINBLUE_API_KEY":os.environ.get("DJANGO_EMAIL_API_KEY"),
    "ANYMAIL_SENDINBLUE_API_KEY":os.environ.get("DJANGO_EMAIL_API_KEY"),
    
      # your Mailgun domain, if needed
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',  # Or 'DEBUG', 'WARNING', 'ERROR', 'CRITICAL'
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'), # Path to your log file
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'xyz': { # Replace 'your_app_name' with your actual app name
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': False, # Set to False to prevent messages from propagating to parent loggers
        },
         'xyz': { # Replace 'your_app_name' with your actual app name
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': False, # Set to False to prevent messages from propagating to parent loggers
        },
        '': { # Root logger - captures logs from any Python application without a specific logger
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}

APPOINTMENT_BASE_TEMPLATE = 'proxy/base.html'
APPOINTMENT_WEBSITE_NAME = 'Eleanor Cassady'  # Can be set in the Config model.
DEFAULT_FROM_EMAIL = "notifications@elliecee.xyz"
APPOINTMENT_PAYMENT_URL = None
APPOINTMENT_THANK_YOU_URL = None
APPOINTMENT_BUFFER_TIME = 0  # Can be set in the Config Model. Minutes between now and the first available slot for the current day (doesn't affect future dates)
APPOINTMENT_SLOT_DURATION = 30  # Can be set in the Config Model. Duration of each appointment slot in minutes 
APPOINTMENT_LEAD_TIME = (9, 0)  # Can be set in the Config Model. Start time of the appointment slots (in 24-hour format)
APPOINTMENT_FINISH_TIME = (16, 30)  # Can be set in the Config Model. End time of the appointment slots (in 24-hour format)
USE_DJANGO_Q_FOR_EMAILS = False  # ðŸ†• Use Django Q for sending ALL emails.
DJANGO_Q_AVAILABLE = False


#wat
